#cloud-config

# This script should be supplied as 'user-data' for a GCE VM instance that runs the Container-Optimized OS
# The instance is expected to have an additional disk attached
# The disk will be used for persistent storage -- caching agent logs, and build job workspace between runs
#   and VM restarts (thereby allowing for incremental builds)
#
# The VM will wait for configuration to be present in GCP's Secret Manager, and then bring up a Jenkins
#   agent within a Docker container
# The build jobs can either run within the agent's container, or use Jenkins' Docker plugin to run jobs
#   within other containers (thereby allowing for 'build tools containers')

# Debugging tips:
# - View /var/log/cloud-init-output.log to see stdout/stderr info from the various step
# - View /var/log/cloud-init.log to see cloud-init's internal logs
# - Use 'sudo systemctl status jenkins-agent.service' to see current status for the jenkins-agent service
# - Use 'sudo journalctl -u jenkins-agent.service' to see detailed logs from the jenkins-agent service

# Module execution order:
# - bootcmd
# - users
# - write_files
# - runcmd


# Reference: https://cloudinit.readthedocs.io/en/latest/topics/modules.html#write-files
write_files:
  - path: /run/mount-and-prepare-persistent-disk.sh
    permissions: 0744
    owner: root
    content: |
      #!/bin/bash

      # Mount /dev/sdb under /mnt/disks/persistent-disk,
      #   format it if necessary

      DEVICE=/dev/sdb
      MOUNT_DIR=/mnt/disks/persistent-disk
      sudo mkdir -p "${MOUNT_DIR}"
      sudo chmod a+rwx "${MOUNT_DIR}"

      # Attempt to mount partition
      if ! sudo mount -o discard,defaults,rw "${DEVICE}" "${MOUNT_DIR}"; then

        # Mounting failed: format partition, and attempt to mount again
      	sudo mkfs -t ext4 -m 0 -E lazy_itable_init=0,lazy_journal_init=0,discard "${DEVICE}"
      	sudo mount -o discard,defaults,rw "${DEVICE}" "${MOUNT_DIR}"
      fi

      # Ensure the jenkins agent & workspace folders exist
      #   since these folders will get mounted into containers later on

      AGENT_DIR="${MOUNT_DIR}/agent"
      if [ ! -d "${AGENT_DIR}" ]; then
        mkdir "${AGENT_DIR}"
        chmod ugo+rwx "${AGENT_DIR}"
      fi

      WORKSPACE_DIR="${MOUNT_DIR}/workspace"
      if [ ! -d "${WORKSPACE_DIR}" ]; then
        mkdir "${WORKSPACE_DIR}"
        chmod ugo+rwx "${WORKSPACE_DIR}"
      fi

      # Ensure the Plastic SCM config folder exists
      # This folder will also be mounted into containers later on

      PLASTIC_CONFIG_DIR="${MOUNT_DIR}/.plastic4"
      if [ ! -d "${PLASTIC_CONFIG_DIR}" ]; then
        mkdir "${PLASTIC_CONFIG_DIR}"
        chmod ugo+rwx "${PLASTIC_CONFIG_DIR}"
      fi

  - path: /run/configure-services.sh
    permissions: 0744
    owner: root
    content: |
      #!/bin/bash

      # Allow everyone to access this Docker daemon socket
      # It is only the 'jenkins' (uid=101000) that needs access, but the socket's user/group shows like this from within the container:
      #		jenkins@194572782dea:~$ ls -l /var/run/docker.sock
      #		srw-rw---- 1 nobody nogroup 0 May  2 17:29 /var/run/docker.sock
      # The only straightforward way to make this work is to grant everyone access to the socket
      sudo chmod ugo+rw /var/run/docker.sock

      # Restart Docker daemon, to pick up changes in /etc/docker/daemon.json (in case the Docker daemon
      #   launched before the 'write_files' module ran)
      sudo systemctl restart docker.service

      # Reload all service definitions, to pick up changes in /etc/systemd/system/*.service (new files written
      #   by the 'write_files' module)
      sudo systemctl daemon-reload

      # Launch Jenkins Agent
      sudo systemctl start jenkins-agent.service

  - path: /etc/systemd/system/jenkins-agent.service
    permissions: 0744
    # The user 'chronos' has uid=1000 within the host VM, and this corresponds to the 'jenkins' user within the contaienr
    owner: chronos
    content: |
      [Unit]
      Description=Jenkins Agent
      Requires=docker.service
      After=docker.service

      [Service]
      User=chronos

      Restart=on-failure
      RestartSec=5s

      ExecStart=/run/jenkins-agent.start.sh
      ExecStop=/run/jenkins-agent.stop.sh

  - path: /run/jenkins-agent.start.sh
    permissions: 0744
    # The user 'chronos' has uid=1000 within the host VM, and this corresponds to the 'jenkins' user within the contaienr
    owner: chronos
    content: |
      #!/bin/bash

      # Retrieve hostname from GCE instance metadata
      get_gce_instance_hostname () {

        local METADATA=http://metadata.google.internal/computeMetadata/v1
        local HOSTNAME=$(curl -H 'Metadata-Flavor: Google' "${METADATA}/instance/hostname")

        echo "${HOSTNAME}"
      }

      # Retrieve a secret from GCP Secret Manager (base64-encoded)
      # If the secret is not known, returns ""
      get_gce_secret_base64 () {

        local SECRET_NAME=$1

        local METADATA=http://metadata.google.internal/computeMetadata/v1

        # Fetch access token for google APIs
        local ACCESS_TOKEN=$(curl -H 'Metadata-Flavor: Google' "${METADATA}/instance/service-accounts/default/token" | cut -d '"' -f 4)
        #Typical response format from curl call:
        #   {
        #     "name": "projects/<id>/secrets/<name>/versions/1",
        #     "payload": {
        #       "data": "<base64 encoded string>"
        #     }
        #   }

        local PROJECT=$(curl -H 'Metadata-Flavor: Google' ${METADATA}/project/project-id)

        local SECRET_RESPONSE=$(curl https://secretmanager.googleapis.com/v1/projects/${PROJECT}/secrets/${SECRET_NAME}/versions/latest:access -H "Authorization: Bearer ${ACCESS_TOKEN}")

        if [ $(echo ${SECRET_RESPONSE} | awk -F "\"" '{print $2}') != 'error' ]; then
          local SECRET=$(echo ${SECRET_RESPONSE} | awk -F "\"" '{print $10}')
          echo $SECRET
        fi
      }

      AGENT_NAME=$(get_gce_instance_hostname | cut -d '.' -f 1)

      echo "Agent name: ${AGENT_NAME}"

      # Wait for necessary parameters to become available in GCE's Secret Manager

      while :
      do
        echo "Retrieving configuration from Secrets Manager..."
        ACCESS_KEY="$(get_gce_secret_base64 "agent-key-file" | base64 --decode)"
        JENKINS_URL="$(get_gce_secret_base64 "jenkins-url" | base64 --decode)"
        AGENT_IMAGE_URL_LINUX="$(get_gce_secret_base64 "inbound-agent-image-url-linux" | base64 --decode)"
        AGENT_SECRET="$(get_gce_secret_base64 "inbound-agent-secret-${AGENT_NAME}" | base64 --decode)"
        PLASTIC_CONFIG_BASE64="$(get_gce_secret_base64 "plastic-config-tgz")"

        echo "Required secrets/instance metadata:"
        echo "Secret agent-key-file: $([[ "${AGENT_KEY_FILE}" != "" ]] && echo "found" || echo "not found")"
        echo "Secret jenkins-url: $([[ "${JENKINS_URL}" != "" ]] && echo "found" || echo "not found")"
        echo "Secret inbound-agent-image-url-linux: $([[ "${AGENT_IMAGE_URL_LINUX}" != "" ]] && echo "found" || echo "not found")"
        echo "Secret inbound-agent-secret-${AGENT_NAME}: $([[ "${AGENT_SECRET}" != "" ]] && echo "found" || echo "not found")"
        echo "Optional secrets:"
        echo "Secret plastic-config-tgz: $([[ "${PLASTIC_CONFIG_BASE64}" != "" ]] && echo "found" || echo "not found")"

        if [ "${ACCESS_KEY}" != "" ] && [ "${JENKINS_URL}" != "" ] && [ "${AGENT_IMAGE_URL_LINUX}" != "" ] && [ "${AGENT_SECRET}" != "" ]; then
          break
        fi

        echo "Some required secrets are missing. Sleeping, then retrying..."
        sleep 10
      done

      if [ "${PLASTIC_CONFIG_BASE64}" != "" ]; then
        echo "Deploying Plastic SCM client configuration..."
        echo "${PLASTIC_CONFIG_BASE64}" | base64 --decode | tar -zxv --directory=/mnt/disks/persistent-disk/.plastic4
      fi

      echo "Authenticating Docker for Google Artifact Registry..."

      # Use JSON key-based authentication for Docker
      #
      # While we could rely on the application default credentials (using the instance's own service account) instead,
      #   that would work on the host VM but not within the jenkins-agent container (the instance metadata service
      #   is not available at 169.254.169.254 there). The simplest way for us to get Docker authentication to work
      #   both on the host VM and within the container is to switch to JSON key authentication and then
      #   mount the docker config file into the jenkins-agent container.

      LOCATION=$(echo "${AGENT_IMAGE_URL_LINUX}" | cut -d '-' -f 1-2)
      # AGENT_IMAGE_URL_LINUX typically looks like: europe-west1-docker.pkg.dev/<project>/<folder>/<file>
      echo "${ACCESS_KEY}" | docker login -u _json_key --password-stdin "https://${LOCATION}-docker.pkg.dev"

      echo "Starting Jenkins Agent container..."

      # Launch jenkins-agent container
      #
      # The mounts serve different purposes:
      # - /home/jenkins/.docker/config.json - allows pulling images from Google Artifact Registry from within the container
      # - /var/run/docker.sock - allows for interacting with the Docker daemon from within the container
      # - /home/jenkins/agent - allows for storing logs and .JAR cache somewhere that persists between host VM restarts
      # - /home/jenkins/worksapce - allows for storing build job workspace somewhere that persists between host VM restarts,
      #
      # All these mounts will also be used in any additional containers started by the build job,
      #   so all these resources will be accessible by the build job's own script logic;
      #   in theory, the build job only needs access to /home/jenkins/workspace but Jenkins offers no means
      #   for restricting which of these mounts will be present when the build job's logic runs

      docker \
        run \
        --detach \
        --rm \
        --name=jenkins-agent \
        --mount type=bind,source=/home/chronos/user/.docker/config.json,destination=/home/jenkins/.docker/config.json \
        --mount type=bind,source=/mnt/disks/persistent-disk/workspace,destination=/home/jenkins/workspace \
        --mount type=bind,source=/mnt/disks/persistent-disk/agent,destination=/home/jenkins/agent \
        --mount type=bind,source=/mnt/disks/persistent-disk/.plastic4,destination=/home/jenkins/.plastic4 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        "${AGENT_IMAGE_URL_LINUX}" \
        -url "${JENKINS_URL}" \
        -workDir /home/jenkins/agent \
        -webSocket \
        "${AGENT_SECRET}" \
        "${AGENT_NAME}"

      echo "Jenkins Agent is now running."

      docker wait jenkins-agent

      echo "Jenkins Agent container has stopped."

  - path: /run/jenkins-agent.stop.sh
    permissions: 0744
    # The user 'chronos' has uid=1000 within the host VM, and this corresponds to the 'jenkins' user within the contaienr
    owner: chronos
    content: |
      #!/bin/bash

      docker stop jenkins-agent

# Reference: https://cloudinit.readthedocs.io/en/latest/topics/modules.html#runcmd
runcmd:
  - /run/mount-and-prepare-persistent-disk.sh
  - /run/configure-services.sh
